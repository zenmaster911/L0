// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package repo_mocks

//go:generate minimock -i github.com/zenmaster911/L0/pkg/repository.Delivery -o delivery_mock.go -n DeliveryMock -p repo_mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/zenmaster911/L0/pkg/model"
)

// DeliveryMock implements mm_repository.Delivery
type DeliveryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetCustomerDeliveryByAddress          func(address string, customerUid string) (d1 model.Delivery, err error)
	funcGetCustomerDeliveryByAddressOrigin    string
	inspectFuncGetCustomerDeliveryByAddress   func(address string, customerUid string)
	afterGetCustomerDeliveryByAddressCounter  uint64
	beforeGetCustomerDeliveryByAddressCounter uint64
	GetCustomerDeliveryByAddressMock          mDeliveryMockGetCustomerDeliveryByAddress
}

// NewDeliveryMock returns a mock for mm_repository.Delivery
func NewDeliveryMock(t minimock.Tester) *DeliveryMock {
	m := &DeliveryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCustomerDeliveryByAddressMock = mDeliveryMockGetCustomerDeliveryByAddress{mock: m}
	m.GetCustomerDeliveryByAddressMock.callArgs = []*DeliveryMockGetCustomerDeliveryByAddressParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mDeliveryMockGetCustomerDeliveryByAddress struct {
	optional           bool
	mock               *DeliveryMock
	defaultExpectation *DeliveryMockGetCustomerDeliveryByAddressExpectation
	expectations       []*DeliveryMockGetCustomerDeliveryByAddressExpectation

	callArgs []*DeliveryMockGetCustomerDeliveryByAddressParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// DeliveryMockGetCustomerDeliveryByAddressExpectation specifies expectation struct of the Delivery.GetCustomerDeliveryByAddress
type DeliveryMockGetCustomerDeliveryByAddressExpectation struct {
	mock               *DeliveryMock
	params             *DeliveryMockGetCustomerDeliveryByAddressParams
	paramPtrs          *DeliveryMockGetCustomerDeliveryByAddressParamPtrs
	expectationOrigins DeliveryMockGetCustomerDeliveryByAddressExpectationOrigins
	results            *DeliveryMockGetCustomerDeliveryByAddressResults
	returnOrigin       string
	Counter            uint64
}

// DeliveryMockGetCustomerDeliveryByAddressParams contains parameters of the Delivery.GetCustomerDeliveryByAddress
type DeliveryMockGetCustomerDeliveryByAddressParams struct {
	address     string
	customerUid string
}

// DeliveryMockGetCustomerDeliveryByAddressParamPtrs contains pointers to parameters of the Delivery.GetCustomerDeliveryByAddress
type DeliveryMockGetCustomerDeliveryByAddressParamPtrs struct {
	address     *string
	customerUid *string
}

// DeliveryMockGetCustomerDeliveryByAddressResults contains results of the Delivery.GetCustomerDeliveryByAddress
type DeliveryMockGetCustomerDeliveryByAddressResults struct {
	d1  model.Delivery
	err error
}

// DeliveryMockGetCustomerDeliveryByAddressOrigins contains origins of expectations of the Delivery.GetCustomerDeliveryByAddress
type DeliveryMockGetCustomerDeliveryByAddressExpectationOrigins struct {
	origin            string
	originAddress     string
	originCustomerUid string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Optional() *mDeliveryMockGetCustomerDeliveryByAddress {
	mmGetCustomerDeliveryByAddress.optional = true
	return mmGetCustomerDeliveryByAddress
}

// Expect sets up expected params for Delivery.GetCustomerDeliveryByAddress
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Expect(address string, customerUid string) *mDeliveryMockGetCustomerDeliveryByAddress {
	if mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Set")
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation == nil {
		mmGetCustomerDeliveryByAddress.defaultExpectation = &DeliveryMockGetCustomerDeliveryByAddressExpectation{}
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by ExpectParams functions")
	}

	mmGetCustomerDeliveryByAddress.defaultExpectation.params = &DeliveryMockGetCustomerDeliveryByAddressParams{address, customerUid}
	mmGetCustomerDeliveryByAddress.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCustomerDeliveryByAddress.expectations {
		if minimock.Equal(e.params, mmGetCustomerDeliveryByAddress.defaultExpectation.params) {
			mmGetCustomerDeliveryByAddress.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCustomerDeliveryByAddress.defaultExpectation.params)
		}
	}

	return mmGetCustomerDeliveryByAddress
}

// ExpectAddressParam1 sets up expected param address for Delivery.GetCustomerDeliveryByAddress
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) ExpectAddressParam1(address string) *mDeliveryMockGetCustomerDeliveryByAddress {
	if mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Set")
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation == nil {
		mmGetCustomerDeliveryByAddress.defaultExpectation = &DeliveryMockGetCustomerDeliveryByAddressExpectation{}
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation.params != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Expect")
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs == nil {
		mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs = &DeliveryMockGetCustomerDeliveryByAddressParamPtrs{}
	}
	mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs.address = &address
	mmGetCustomerDeliveryByAddress.defaultExpectation.expectationOrigins.originAddress = minimock.CallerInfo(1)

	return mmGetCustomerDeliveryByAddress
}

// ExpectCustomerUidParam2 sets up expected param customerUid for Delivery.GetCustomerDeliveryByAddress
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) ExpectCustomerUidParam2(customerUid string) *mDeliveryMockGetCustomerDeliveryByAddress {
	if mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Set")
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation == nil {
		mmGetCustomerDeliveryByAddress.defaultExpectation = &DeliveryMockGetCustomerDeliveryByAddressExpectation{}
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation.params != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Expect")
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs == nil {
		mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs = &DeliveryMockGetCustomerDeliveryByAddressParamPtrs{}
	}
	mmGetCustomerDeliveryByAddress.defaultExpectation.paramPtrs.customerUid = &customerUid
	mmGetCustomerDeliveryByAddress.defaultExpectation.expectationOrigins.originCustomerUid = minimock.CallerInfo(1)

	return mmGetCustomerDeliveryByAddress
}

// Inspect accepts an inspector function that has same arguments as the Delivery.GetCustomerDeliveryByAddress
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Inspect(f func(address string, customerUid string)) *mDeliveryMockGetCustomerDeliveryByAddress {
	if mmGetCustomerDeliveryByAddress.mock.inspectFuncGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("Inspect function is already set for DeliveryMock.GetCustomerDeliveryByAddress")
	}

	mmGetCustomerDeliveryByAddress.mock.inspectFuncGetCustomerDeliveryByAddress = f

	return mmGetCustomerDeliveryByAddress
}

// Return sets up results that will be returned by Delivery.GetCustomerDeliveryByAddress
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Return(d1 model.Delivery, err error) *DeliveryMock {
	if mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Set")
	}

	if mmGetCustomerDeliveryByAddress.defaultExpectation == nil {
		mmGetCustomerDeliveryByAddress.defaultExpectation = &DeliveryMockGetCustomerDeliveryByAddressExpectation{mock: mmGetCustomerDeliveryByAddress.mock}
	}
	mmGetCustomerDeliveryByAddress.defaultExpectation.results = &DeliveryMockGetCustomerDeliveryByAddressResults{d1, err}
	mmGetCustomerDeliveryByAddress.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCustomerDeliveryByAddress.mock
}

// Set uses given function f to mock the Delivery.GetCustomerDeliveryByAddress method
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Set(f func(address string, customerUid string) (d1 model.Delivery, err error)) *DeliveryMock {
	if mmGetCustomerDeliveryByAddress.defaultExpectation != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("Default expectation is already set for the Delivery.GetCustomerDeliveryByAddress method")
	}

	if len(mmGetCustomerDeliveryByAddress.expectations) > 0 {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("Some expectations are already set for the Delivery.GetCustomerDeliveryByAddress method")
	}

	mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress = f
	mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddressOrigin = minimock.CallerInfo(1)
	return mmGetCustomerDeliveryByAddress.mock
}

// When sets expectation for the Delivery.GetCustomerDeliveryByAddress which will trigger the result defined by the following
// Then helper
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) When(address string, customerUid string) *DeliveryMockGetCustomerDeliveryByAddressExpectation {
	if mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("DeliveryMock.GetCustomerDeliveryByAddress mock is already set by Set")
	}

	expectation := &DeliveryMockGetCustomerDeliveryByAddressExpectation{
		mock:               mmGetCustomerDeliveryByAddress.mock,
		params:             &DeliveryMockGetCustomerDeliveryByAddressParams{address, customerUid},
		expectationOrigins: DeliveryMockGetCustomerDeliveryByAddressExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCustomerDeliveryByAddress.expectations = append(mmGetCustomerDeliveryByAddress.expectations, expectation)
	return expectation
}

// Then sets up Delivery.GetCustomerDeliveryByAddress return parameters for the expectation previously defined by the When method
func (e *DeliveryMockGetCustomerDeliveryByAddressExpectation) Then(d1 model.Delivery, err error) *DeliveryMock {
	e.results = &DeliveryMockGetCustomerDeliveryByAddressResults{d1, err}
	return e.mock
}

// Times sets number of times Delivery.GetCustomerDeliveryByAddress should be invoked
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Times(n uint64) *mDeliveryMockGetCustomerDeliveryByAddress {
	if n == 0 {
		mmGetCustomerDeliveryByAddress.mock.t.Fatalf("Times of DeliveryMock.GetCustomerDeliveryByAddress mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCustomerDeliveryByAddress.expectedInvocations, n)
	mmGetCustomerDeliveryByAddress.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCustomerDeliveryByAddress
}

func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) invocationsDone() bool {
	if len(mmGetCustomerDeliveryByAddress.expectations) == 0 && mmGetCustomerDeliveryByAddress.defaultExpectation == nil && mmGetCustomerDeliveryByAddress.mock.funcGetCustomerDeliveryByAddress == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCustomerDeliveryByAddress.mock.afterGetCustomerDeliveryByAddressCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCustomerDeliveryByAddress.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCustomerDeliveryByAddress implements mm_repository.Delivery
func (mmGetCustomerDeliveryByAddress *DeliveryMock) GetCustomerDeliveryByAddress(address string, customerUid string) (d1 model.Delivery, err error) {
	mm_atomic.AddUint64(&mmGetCustomerDeliveryByAddress.beforeGetCustomerDeliveryByAddressCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCustomerDeliveryByAddress.afterGetCustomerDeliveryByAddressCounter, 1)

	mmGetCustomerDeliveryByAddress.t.Helper()

	if mmGetCustomerDeliveryByAddress.inspectFuncGetCustomerDeliveryByAddress != nil {
		mmGetCustomerDeliveryByAddress.inspectFuncGetCustomerDeliveryByAddress(address, customerUid)
	}

	mm_params := DeliveryMockGetCustomerDeliveryByAddressParams{address, customerUid}

	// Record call args
	mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.mutex.Lock()
	mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.callArgs = append(mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.callArgs, &mm_params)
	mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.mutex.Unlock()

	for _, e := range mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.err
		}
	}

	if mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.params
		mm_want_ptrs := mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.paramPtrs

		mm_got := DeliveryMockGetCustomerDeliveryByAddressParams{address, customerUid}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.address != nil && !minimock.Equal(*mm_want_ptrs.address, mm_got.address) {
				mmGetCustomerDeliveryByAddress.t.Errorf("DeliveryMock.GetCustomerDeliveryByAddress got unexpected parameter address, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.expectationOrigins.originAddress, *mm_want_ptrs.address, mm_got.address, minimock.Diff(*mm_want_ptrs.address, mm_got.address))
			}

			if mm_want_ptrs.customerUid != nil && !minimock.Equal(*mm_want_ptrs.customerUid, mm_got.customerUid) {
				mmGetCustomerDeliveryByAddress.t.Errorf("DeliveryMock.GetCustomerDeliveryByAddress got unexpected parameter customerUid, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.expectationOrigins.originCustomerUid, *mm_want_ptrs.customerUid, mm_got.customerUid, minimock.Diff(*mm_want_ptrs.customerUid, mm_got.customerUid))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCustomerDeliveryByAddress.t.Errorf("DeliveryMock.GetCustomerDeliveryByAddress got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCustomerDeliveryByAddress.GetCustomerDeliveryByAddressMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCustomerDeliveryByAddress.t.Fatal("No results are set for the DeliveryMock.GetCustomerDeliveryByAddress")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmGetCustomerDeliveryByAddress.funcGetCustomerDeliveryByAddress != nil {
		return mmGetCustomerDeliveryByAddress.funcGetCustomerDeliveryByAddress(address, customerUid)
	}
	mmGetCustomerDeliveryByAddress.t.Fatalf("Unexpected call to DeliveryMock.GetCustomerDeliveryByAddress. %v %v", address, customerUid)
	return
}

// GetCustomerDeliveryByAddressAfterCounter returns a count of finished DeliveryMock.GetCustomerDeliveryByAddress invocations
func (mmGetCustomerDeliveryByAddress *DeliveryMock) GetCustomerDeliveryByAddressAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCustomerDeliveryByAddress.afterGetCustomerDeliveryByAddressCounter)
}

// GetCustomerDeliveryByAddressBeforeCounter returns a count of DeliveryMock.GetCustomerDeliveryByAddress invocations
func (mmGetCustomerDeliveryByAddress *DeliveryMock) GetCustomerDeliveryByAddressBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCustomerDeliveryByAddress.beforeGetCustomerDeliveryByAddressCounter)
}

// Calls returns a list of arguments used in each call to DeliveryMock.GetCustomerDeliveryByAddress.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCustomerDeliveryByAddress *mDeliveryMockGetCustomerDeliveryByAddress) Calls() []*DeliveryMockGetCustomerDeliveryByAddressParams {
	mmGetCustomerDeliveryByAddress.mutex.RLock()

	argCopy := make([]*DeliveryMockGetCustomerDeliveryByAddressParams, len(mmGetCustomerDeliveryByAddress.callArgs))
	copy(argCopy, mmGetCustomerDeliveryByAddress.callArgs)

	mmGetCustomerDeliveryByAddress.mutex.RUnlock()

	return argCopy
}

// MinimockGetCustomerDeliveryByAddressDone returns true if the count of the GetCustomerDeliveryByAddress invocations corresponds
// the number of defined expectations
func (m *DeliveryMock) MinimockGetCustomerDeliveryByAddressDone() bool {
	if m.GetCustomerDeliveryByAddressMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCustomerDeliveryByAddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCustomerDeliveryByAddressMock.invocationsDone()
}

// MinimockGetCustomerDeliveryByAddressInspect logs each unmet expectation
func (m *DeliveryMock) MinimockGetCustomerDeliveryByAddressInspect() {
	for _, e := range m.GetCustomerDeliveryByAddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DeliveryMock.GetCustomerDeliveryByAddress at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCustomerDeliveryByAddressCounter := mm_atomic.LoadUint64(&m.afterGetCustomerDeliveryByAddressCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCustomerDeliveryByAddressMock.defaultExpectation != nil && afterGetCustomerDeliveryByAddressCounter < 1 {
		if m.GetCustomerDeliveryByAddressMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to DeliveryMock.GetCustomerDeliveryByAddress at\n%s", m.GetCustomerDeliveryByAddressMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to DeliveryMock.GetCustomerDeliveryByAddress at\n%s with params: %#v", m.GetCustomerDeliveryByAddressMock.defaultExpectation.expectationOrigins.origin, *m.GetCustomerDeliveryByAddressMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCustomerDeliveryByAddress != nil && afterGetCustomerDeliveryByAddressCounter < 1 {
		m.t.Errorf("Expected call to DeliveryMock.GetCustomerDeliveryByAddress at\n%s", m.funcGetCustomerDeliveryByAddressOrigin)
	}

	if !m.GetCustomerDeliveryByAddressMock.invocationsDone() && afterGetCustomerDeliveryByAddressCounter > 0 {
		m.t.Errorf("Expected %d calls to DeliveryMock.GetCustomerDeliveryByAddress at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCustomerDeliveryByAddressMock.expectedInvocations), m.GetCustomerDeliveryByAddressMock.expectedInvocationsOrigin, afterGetCustomerDeliveryByAddressCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DeliveryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetCustomerDeliveryByAddressInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DeliveryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DeliveryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCustomerDeliveryByAddressDone()
}

// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/zenmaster911/L0/pkg/service.Item -o item_mock.go -n ItemMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/zenmaster911/L0/pkg/model"
)

// ItemMock implements mm_service.Item
type ItemMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetItemByArticle          func(nmId int) (i1 model.Item, err error)
	funcGetItemByArticleOrigin    string
	inspectFuncGetItemByArticle   func(nmId int)
	afterGetItemByArticleCounter  uint64
	beforeGetItemByArticleCounter uint64
	GetItemByArticleMock          mItemMockGetItemByArticle
}

// NewItemMock returns a mock for mm_service.Item
func NewItemMock(t minimock.Tester) *ItemMock {
	m := &ItemMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetItemByArticleMock = mItemMockGetItemByArticle{mock: m}
	m.GetItemByArticleMock.callArgs = []*ItemMockGetItemByArticleParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mItemMockGetItemByArticle struct {
	optional           bool
	mock               *ItemMock
	defaultExpectation *ItemMockGetItemByArticleExpectation
	expectations       []*ItemMockGetItemByArticleExpectation

	callArgs []*ItemMockGetItemByArticleParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ItemMockGetItemByArticleExpectation specifies expectation struct of the Item.GetItemByArticle
type ItemMockGetItemByArticleExpectation struct {
	mock               *ItemMock
	params             *ItemMockGetItemByArticleParams
	paramPtrs          *ItemMockGetItemByArticleParamPtrs
	expectationOrigins ItemMockGetItemByArticleExpectationOrigins
	results            *ItemMockGetItemByArticleResults
	returnOrigin       string
	Counter            uint64
}

// ItemMockGetItemByArticleParams contains parameters of the Item.GetItemByArticle
type ItemMockGetItemByArticleParams struct {
	nmId int
}

// ItemMockGetItemByArticleParamPtrs contains pointers to parameters of the Item.GetItemByArticle
type ItemMockGetItemByArticleParamPtrs struct {
	nmId *int
}

// ItemMockGetItemByArticleResults contains results of the Item.GetItemByArticle
type ItemMockGetItemByArticleResults struct {
	i1  model.Item
	err error
}

// ItemMockGetItemByArticleOrigins contains origins of expectations of the Item.GetItemByArticle
type ItemMockGetItemByArticleExpectationOrigins struct {
	origin     string
	originNmId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetItemByArticle *mItemMockGetItemByArticle) Optional() *mItemMockGetItemByArticle {
	mmGetItemByArticle.optional = true
	return mmGetItemByArticle
}

// Expect sets up expected params for Item.GetItemByArticle
func (mmGetItemByArticle *mItemMockGetItemByArticle) Expect(nmId int) *mItemMockGetItemByArticle {
	if mmGetItemByArticle.mock.funcGetItemByArticle != nil {
		mmGetItemByArticle.mock.t.Fatalf("ItemMock.GetItemByArticle mock is already set by Set")
	}

	if mmGetItemByArticle.defaultExpectation == nil {
		mmGetItemByArticle.defaultExpectation = &ItemMockGetItemByArticleExpectation{}
	}

	if mmGetItemByArticle.defaultExpectation.paramPtrs != nil {
		mmGetItemByArticle.mock.t.Fatalf("ItemMock.GetItemByArticle mock is already set by ExpectParams functions")
	}

	mmGetItemByArticle.defaultExpectation.params = &ItemMockGetItemByArticleParams{nmId}
	mmGetItemByArticle.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetItemByArticle.expectations {
		if minimock.Equal(e.params, mmGetItemByArticle.defaultExpectation.params) {
			mmGetItemByArticle.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetItemByArticle.defaultExpectation.params)
		}
	}

	return mmGetItemByArticle
}

// ExpectNmIdParam1 sets up expected param nmId for Item.GetItemByArticle
func (mmGetItemByArticle *mItemMockGetItemByArticle) ExpectNmIdParam1(nmId int) *mItemMockGetItemByArticle {
	if mmGetItemByArticle.mock.funcGetItemByArticle != nil {
		mmGetItemByArticle.mock.t.Fatalf("ItemMock.GetItemByArticle mock is already set by Set")
	}

	if mmGetItemByArticle.defaultExpectation == nil {
		mmGetItemByArticle.defaultExpectation = &ItemMockGetItemByArticleExpectation{}
	}

	if mmGetItemByArticle.defaultExpectation.params != nil {
		mmGetItemByArticle.mock.t.Fatalf("ItemMock.GetItemByArticle mock is already set by Expect")
	}

	if mmGetItemByArticle.defaultExpectation.paramPtrs == nil {
		mmGetItemByArticle.defaultExpectation.paramPtrs = &ItemMockGetItemByArticleParamPtrs{}
	}
	mmGetItemByArticle.defaultExpectation.paramPtrs.nmId = &nmId
	mmGetItemByArticle.defaultExpectation.expectationOrigins.originNmId = minimock.CallerInfo(1)

	return mmGetItemByArticle
}

// Inspect accepts an inspector function that has same arguments as the Item.GetItemByArticle
func (mmGetItemByArticle *mItemMockGetItemByArticle) Inspect(f func(nmId int)) *mItemMockGetItemByArticle {
	if mmGetItemByArticle.mock.inspectFuncGetItemByArticle != nil {
		mmGetItemByArticle.mock.t.Fatalf("Inspect function is already set for ItemMock.GetItemByArticle")
	}

	mmGetItemByArticle.mock.inspectFuncGetItemByArticle = f

	return mmGetItemByArticle
}

// Return sets up results that will be returned by Item.GetItemByArticle
func (mmGetItemByArticle *mItemMockGetItemByArticle) Return(i1 model.Item, err error) *ItemMock {
	if mmGetItemByArticle.mock.funcGetItemByArticle != nil {
		mmGetItemByArticle.mock.t.Fatalf("ItemMock.GetItemByArticle mock is already set by Set")
	}

	if mmGetItemByArticle.defaultExpectation == nil {
		mmGetItemByArticle.defaultExpectation = &ItemMockGetItemByArticleExpectation{mock: mmGetItemByArticle.mock}
	}
	mmGetItemByArticle.defaultExpectation.results = &ItemMockGetItemByArticleResults{i1, err}
	mmGetItemByArticle.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetItemByArticle.mock
}

// Set uses given function f to mock the Item.GetItemByArticle method
func (mmGetItemByArticle *mItemMockGetItemByArticle) Set(f func(nmId int) (i1 model.Item, err error)) *ItemMock {
	if mmGetItemByArticle.defaultExpectation != nil {
		mmGetItemByArticle.mock.t.Fatalf("Default expectation is already set for the Item.GetItemByArticle method")
	}

	if len(mmGetItemByArticle.expectations) > 0 {
		mmGetItemByArticle.mock.t.Fatalf("Some expectations are already set for the Item.GetItemByArticle method")
	}

	mmGetItemByArticle.mock.funcGetItemByArticle = f
	mmGetItemByArticle.mock.funcGetItemByArticleOrigin = minimock.CallerInfo(1)
	return mmGetItemByArticle.mock
}

// When sets expectation for the Item.GetItemByArticle which will trigger the result defined by the following
// Then helper
func (mmGetItemByArticle *mItemMockGetItemByArticle) When(nmId int) *ItemMockGetItemByArticleExpectation {
	if mmGetItemByArticle.mock.funcGetItemByArticle != nil {
		mmGetItemByArticle.mock.t.Fatalf("ItemMock.GetItemByArticle mock is already set by Set")
	}

	expectation := &ItemMockGetItemByArticleExpectation{
		mock:               mmGetItemByArticle.mock,
		params:             &ItemMockGetItemByArticleParams{nmId},
		expectationOrigins: ItemMockGetItemByArticleExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetItemByArticle.expectations = append(mmGetItemByArticle.expectations, expectation)
	return expectation
}

// Then sets up Item.GetItemByArticle return parameters for the expectation previously defined by the When method
func (e *ItemMockGetItemByArticleExpectation) Then(i1 model.Item, err error) *ItemMock {
	e.results = &ItemMockGetItemByArticleResults{i1, err}
	return e.mock
}

// Times sets number of times Item.GetItemByArticle should be invoked
func (mmGetItemByArticle *mItemMockGetItemByArticle) Times(n uint64) *mItemMockGetItemByArticle {
	if n == 0 {
		mmGetItemByArticle.mock.t.Fatalf("Times of ItemMock.GetItemByArticle mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetItemByArticle.expectedInvocations, n)
	mmGetItemByArticle.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetItemByArticle
}

func (mmGetItemByArticle *mItemMockGetItemByArticle) invocationsDone() bool {
	if len(mmGetItemByArticle.expectations) == 0 && mmGetItemByArticle.defaultExpectation == nil && mmGetItemByArticle.mock.funcGetItemByArticle == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetItemByArticle.mock.afterGetItemByArticleCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetItemByArticle.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetItemByArticle implements mm_service.Item
func (mmGetItemByArticle *ItemMock) GetItemByArticle(nmId int) (i1 model.Item, err error) {
	mm_atomic.AddUint64(&mmGetItemByArticle.beforeGetItemByArticleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetItemByArticle.afterGetItemByArticleCounter, 1)

	mmGetItemByArticle.t.Helper()

	if mmGetItemByArticle.inspectFuncGetItemByArticle != nil {
		mmGetItemByArticle.inspectFuncGetItemByArticle(nmId)
	}

	mm_params := ItemMockGetItemByArticleParams{nmId}

	// Record call args
	mmGetItemByArticle.GetItemByArticleMock.mutex.Lock()
	mmGetItemByArticle.GetItemByArticleMock.callArgs = append(mmGetItemByArticle.GetItemByArticleMock.callArgs, &mm_params)
	mmGetItemByArticle.GetItemByArticleMock.mutex.Unlock()

	for _, e := range mmGetItemByArticle.GetItemByArticleMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmGetItemByArticle.GetItemByArticleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetItemByArticle.GetItemByArticleMock.defaultExpectation.Counter, 1)
		mm_want := mmGetItemByArticle.GetItemByArticleMock.defaultExpectation.params
		mm_want_ptrs := mmGetItemByArticle.GetItemByArticleMock.defaultExpectation.paramPtrs

		mm_got := ItemMockGetItemByArticleParams{nmId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.nmId != nil && !minimock.Equal(*mm_want_ptrs.nmId, mm_got.nmId) {
				mmGetItemByArticle.t.Errorf("ItemMock.GetItemByArticle got unexpected parameter nmId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetItemByArticle.GetItemByArticleMock.defaultExpectation.expectationOrigins.originNmId, *mm_want_ptrs.nmId, mm_got.nmId, minimock.Diff(*mm_want_ptrs.nmId, mm_got.nmId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetItemByArticle.t.Errorf("ItemMock.GetItemByArticle got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetItemByArticle.GetItemByArticleMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetItemByArticle.GetItemByArticleMock.defaultExpectation.results
		if mm_results == nil {
			mmGetItemByArticle.t.Fatal("No results are set for the ItemMock.GetItemByArticle")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetItemByArticle.funcGetItemByArticle != nil {
		return mmGetItemByArticle.funcGetItemByArticle(nmId)
	}
	mmGetItemByArticle.t.Fatalf("Unexpected call to ItemMock.GetItemByArticle. %v", nmId)
	return
}

// GetItemByArticleAfterCounter returns a count of finished ItemMock.GetItemByArticle invocations
func (mmGetItemByArticle *ItemMock) GetItemByArticleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItemByArticle.afterGetItemByArticleCounter)
}

// GetItemByArticleBeforeCounter returns a count of ItemMock.GetItemByArticle invocations
func (mmGetItemByArticle *ItemMock) GetItemByArticleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItemByArticle.beforeGetItemByArticleCounter)
}

// Calls returns a list of arguments used in each call to ItemMock.GetItemByArticle.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetItemByArticle *mItemMockGetItemByArticle) Calls() []*ItemMockGetItemByArticleParams {
	mmGetItemByArticle.mutex.RLock()

	argCopy := make([]*ItemMockGetItemByArticleParams, len(mmGetItemByArticle.callArgs))
	copy(argCopy, mmGetItemByArticle.callArgs)

	mmGetItemByArticle.mutex.RUnlock()

	return argCopy
}

// MinimockGetItemByArticleDone returns true if the count of the GetItemByArticle invocations corresponds
// the number of defined expectations
func (m *ItemMock) MinimockGetItemByArticleDone() bool {
	if m.GetItemByArticleMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetItemByArticleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetItemByArticleMock.invocationsDone()
}

// MinimockGetItemByArticleInspect logs each unmet expectation
func (m *ItemMock) MinimockGetItemByArticleInspect() {
	for _, e := range m.GetItemByArticleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ItemMock.GetItemByArticle at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetItemByArticleCounter := mm_atomic.LoadUint64(&m.afterGetItemByArticleCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemByArticleMock.defaultExpectation != nil && afterGetItemByArticleCounter < 1 {
		if m.GetItemByArticleMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ItemMock.GetItemByArticle at\n%s", m.GetItemByArticleMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ItemMock.GetItemByArticle at\n%s with params: %#v", m.GetItemByArticleMock.defaultExpectation.expectationOrigins.origin, *m.GetItemByArticleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItemByArticle != nil && afterGetItemByArticleCounter < 1 {
		m.t.Errorf("Expected call to ItemMock.GetItemByArticle at\n%s", m.funcGetItemByArticleOrigin)
	}

	if !m.GetItemByArticleMock.invocationsDone() && afterGetItemByArticleCounter > 0 {
		m.t.Errorf("Expected %d calls to ItemMock.GetItemByArticle at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetItemByArticleMock.expectedInvocations), m.GetItemByArticleMock.expectedInvocationsOrigin, afterGetItemByArticleCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ItemMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetItemByArticleInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ItemMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ItemMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetItemByArticleDone()
}

// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/zenmaster911/L0/pkg/service.Cache -o cache_mock.go -n CacheMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CacheMock implements mm_service.Cache
type CacheMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCacheLoad          func(limit int) (sa1 []string, err error)
	funcCacheLoadOrigin    string
	inspectFuncCacheLoad   func(limit int)
	afterCacheLoadCounter  uint64
	beforeCacheLoadCounter uint64
	CacheLoadMock          mCacheMockCacheLoad
}

// NewCacheMock returns a mock for mm_service.Cache
func NewCacheMock(t minimock.Tester) *CacheMock {
	m := &CacheMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CacheLoadMock = mCacheMockCacheLoad{mock: m}
	m.CacheLoadMock.callArgs = []*CacheMockCacheLoadParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCacheMockCacheLoad struct {
	optional           bool
	mock               *CacheMock
	defaultExpectation *CacheMockCacheLoadExpectation
	expectations       []*CacheMockCacheLoadExpectation

	callArgs []*CacheMockCacheLoadParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CacheMockCacheLoadExpectation specifies expectation struct of the Cache.CacheLoad
type CacheMockCacheLoadExpectation struct {
	mock               *CacheMock
	params             *CacheMockCacheLoadParams
	paramPtrs          *CacheMockCacheLoadParamPtrs
	expectationOrigins CacheMockCacheLoadExpectationOrigins
	results            *CacheMockCacheLoadResults
	returnOrigin       string
	Counter            uint64
}

// CacheMockCacheLoadParams contains parameters of the Cache.CacheLoad
type CacheMockCacheLoadParams struct {
	limit int
}

// CacheMockCacheLoadParamPtrs contains pointers to parameters of the Cache.CacheLoad
type CacheMockCacheLoadParamPtrs struct {
	limit *int
}

// CacheMockCacheLoadResults contains results of the Cache.CacheLoad
type CacheMockCacheLoadResults struct {
	sa1 []string
	err error
}

// CacheMockCacheLoadOrigins contains origins of expectations of the Cache.CacheLoad
type CacheMockCacheLoadExpectationOrigins struct {
	origin      string
	originLimit string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCacheLoad *mCacheMockCacheLoad) Optional() *mCacheMockCacheLoad {
	mmCacheLoad.optional = true
	return mmCacheLoad
}

// Expect sets up expected params for Cache.CacheLoad
func (mmCacheLoad *mCacheMockCacheLoad) Expect(limit int) *mCacheMockCacheLoad {
	if mmCacheLoad.mock.funcCacheLoad != nil {
		mmCacheLoad.mock.t.Fatalf("CacheMock.CacheLoad mock is already set by Set")
	}

	if mmCacheLoad.defaultExpectation == nil {
		mmCacheLoad.defaultExpectation = &CacheMockCacheLoadExpectation{}
	}

	if mmCacheLoad.defaultExpectation.paramPtrs != nil {
		mmCacheLoad.mock.t.Fatalf("CacheMock.CacheLoad mock is already set by ExpectParams functions")
	}

	mmCacheLoad.defaultExpectation.params = &CacheMockCacheLoadParams{limit}
	mmCacheLoad.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCacheLoad.expectations {
		if minimock.Equal(e.params, mmCacheLoad.defaultExpectation.params) {
			mmCacheLoad.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCacheLoad.defaultExpectation.params)
		}
	}

	return mmCacheLoad
}

// ExpectLimitParam1 sets up expected param limit for Cache.CacheLoad
func (mmCacheLoad *mCacheMockCacheLoad) ExpectLimitParam1(limit int) *mCacheMockCacheLoad {
	if mmCacheLoad.mock.funcCacheLoad != nil {
		mmCacheLoad.mock.t.Fatalf("CacheMock.CacheLoad mock is already set by Set")
	}

	if mmCacheLoad.defaultExpectation == nil {
		mmCacheLoad.defaultExpectation = &CacheMockCacheLoadExpectation{}
	}

	if mmCacheLoad.defaultExpectation.params != nil {
		mmCacheLoad.mock.t.Fatalf("CacheMock.CacheLoad mock is already set by Expect")
	}

	if mmCacheLoad.defaultExpectation.paramPtrs == nil {
		mmCacheLoad.defaultExpectation.paramPtrs = &CacheMockCacheLoadParamPtrs{}
	}
	mmCacheLoad.defaultExpectation.paramPtrs.limit = &limit
	mmCacheLoad.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmCacheLoad
}

// Inspect accepts an inspector function that has same arguments as the Cache.CacheLoad
func (mmCacheLoad *mCacheMockCacheLoad) Inspect(f func(limit int)) *mCacheMockCacheLoad {
	if mmCacheLoad.mock.inspectFuncCacheLoad != nil {
		mmCacheLoad.mock.t.Fatalf("Inspect function is already set for CacheMock.CacheLoad")
	}

	mmCacheLoad.mock.inspectFuncCacheLoad = f

	return mmCacheLoad
}

// Return sets up results that will be returned by Cache.CacheLoad
func (mmCacheLoad *mCacheMockCacheLoad) Return(sa1 []string, err error) *CacheMock {
	if mmCacheLoad.mock.funcCacheLoad != nil {
		mmCacheLoad.mock.t.Fatalf("CacheMock.CacheLoad mock is already set by Set")
	}

	if mmCacheLoad.defaultExpectation == nil {
		mmCacheLoad.defaultExpectation = &CacheMockCacheLoadExpectation{mock: mmCacheLoad.mock}
	}
	mmCacheLoad.defaultExpectation.results = &CacheMockCacheLoadResults{sa1, err}
	mmCacheLoad.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCacheLoad.mock
}

// Set uses given function f to mock the Cache.CacheLoad method
func (mmCacheLoad *mCacheMockCacheLoad) Set(f func(limit int) (sa1 []string, err error)) *CacheMock {
	if mmCacheLoad.defaultExpectation != nil {
		mmCacheLoad.mock.t.Fatalf("Default expectation is already set for the Cache.CacheLoad method")
	}

	if len(mmCacheLoad.expectations) > 0 {
		mmCacheLoad.mock.t.Fatalf("Some expectations are already set for the Cache.CacheLoad method")
	}

	mmCacheLoad.mock.funcCacheLoad = f
	mmCacheLoad.mock.funcCacheLoadOrigin = minimock.CallerInfo(1)
	return mmCacheLoad.mock
}

// When sets expectation for the Cache.CacheLoad which will trigger the result defined by the following
// Then helper
func (mmCacheLoad *mCacheMockCacheLoad) When(limit int) *CacheMockCacheLoadExpectation {
	if mmCacheLoad.mock.funcCacheLoad != nil {
		mmCacheLoad.mock.t.Fatalf("CacheMock.CacheLoad mock is already set by Set")
	}

	expectation := &CacheMockCacheLoadExpectation{
		mock:               mmCacheLoad.mock,
		params:             &CacheMockCacheLoadParams{limit},
		expectationOrigins: CacheMockCacheLoadExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCacheLoad.expectations = append(mmCacheLoad.expectations, expectation)
	return expectation
}

// Then sets up Cache.CacheLoad return parameters for the expectation previously defined by the When method
func (e *CacheMockCacheLoadExpectation) Then(sa1 []string, err error) *CacheMock {
	e.results = &CacheMockCacheLoadResults{sa1, err}
	return e.mock
}

// Times sets number of times Cache.CacheLoad should be invoked
func (mmCacheLoad *mCacheMockCacheLoad) Times(n uint64) *mCacheMockCacheLoad {
	if n == 0 {
		mmCacheLoad.mock.t.Fatalf("Times of CacheMock.CacheLoad mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCacheLoad.expectedInvocations, n)
	mmCacheLoad.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCacheLoad
}

func (mmCacheLoad *mCacheMockCacheLoad) invocationsDone() bool {
	if len(mmCacheLoad.expectations) == 0 && mmCacheLoad.defaultExpectation == nil && mmCacheLoad.mock.funcCacheLoad == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCacheLoad.mock.afterCacheLoadCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCacheLoad.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CacheLoad implements mm_service.Cache
func (mmCacheLoad *CacheMock) CacheLoad(limit int) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmCacheLoad.beforeCacheLoadCounter, 1)
	defer mm_atomic.AddUint64(&mmCacheLoad.afterCacheLoadCounter, 1)

	mmCacheLoad.t.Helper()

	if mmCacheLoad.inspectFuncCacheLoad != nil {
		mmCacheLoad.inspectFuncCacheLoad(limit)
	}

	mm_params := CacheMockCacheLoadParams{limit}

	// Record call args
	mmCacheLoad.CacheLoadMock.mutex.Lock()
	mmCacheLoad.CacheLoadMock.callArgs = append(mmCacheLoad.CacheLoadMock.callArgs, &mm_params)
	mmCacheLoad.CacheLoadMock.mutex.Unlock()

	for _, e := range mmCacheLoad.CacheLoadMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmCacheLoad.CacheLoadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCacheLoad.CacheLoadMock.defaultExpectation.Counter, 1)
		mm_want := mmCacheLoad.CacheLoadMock.defaultExpectation.params
		mm_want_ptrs := mmCacheLoad.CacheLoadMock.defaultExpectation.paramPtrs

		mm_got := CacheMockCacheLoadParams{limit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmCacheLoad.t.Errorf("CacheMock.CacheLoad got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCacheLoad.CacheLoadMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCacheLoad.t.Errorf("CacheMock.CacheLoad got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCacheLoad.CacheLoadMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCacheLoad.CacheLoadMock.defaultExpectation.results
		if mm_results == nil {
			mmCacheLoad.t.Fatal("No results are set for the CacheMock.CacheLoad")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmCacheLoad.funcCacheLoad != nil {
		return mmCacheLoad.funcCacheLoad(limit)
	}
	mmCacheLoad.t.Fatalf("Unexpected call to CacheMock.CacheLoad. %v", limit)
	return
}

// CacheLoadAfterCounter returns a count of finished CacheMock.CacheLoad invocations
func (mmCacheLoad *CacheMock) CacheLoadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCacheLoad.afterCacheLoadCounter)
}

// CacheLoadBeforeCounter returns a count of CacheMock.CacheLoad invocations
func (mmCacheLoad *CacheMock) CacheLoadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCacheLoad.beforeCacheLoadCounter)
}

// Calls returns a list of arguments used in each call to CacheMock.CacheLoad.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCacheLoad *mCacheMockCacheLoad) Calls() []*CacheMockCacheLoadParams {
	mmCacheLoad.mutex.RLock()

	argCopy := make([]*CacheMockCacheLoadParams, len(mmCacheLoad.callArgs))
	copy(argCopy, mmCacheLoad.callArgs)

	mmCacheLoad.mutex.RUnlock()

	return argCopy
}

// MinimockCacheLoadDone returns true if the count of the CacheLoad invocations corresponds
// the number of defined expectations
func (m *CacheMock) MinimockCacheLoadDone() bool {
	if m.CacheLoadMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CacheLoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CacheLoadMock.invocationsDone()
}

// MinimockCacheLoadInspect logs each unmet expectation
func (m *CacheMock) MinimockCacheLoadInspect() {
	for _, e := range m.CacheLoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheMock.CacheLoad at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCacheLoadCounter := mm_atomic.LoadUint64(&m.afterCacheLoadCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CacheLoadMock.defaultExpectation != nil && afterCacheLoadCounter < 1 {
		if m.CacheLoadMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CacheMock.CacheLoad at\n%s", m.CacheLoadMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CacheMock.CacheLoad at\n%s with params: %#v", m.CacheLoadMock.defaultExpectation.expectationOrigins.origin, *m.CacheLoadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCacheLoad != nil && afterCacheLoadCounter < 1 {
		m.t.Errorf("Expected call to CacheMock.CacheLoad at\n%s", m.funcCacheLoadOrigin)
	}

	if !m.CacheLoadMock.invocationsDone() && afterCacheLoadCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheMock.CacheLoad at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CacheLoadMock.expectedInvocations), m.CacheLoadMock.expectedInvocationsOrigin, afterCacheLoadCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCacheLoadInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCacheLoadDone()
}
